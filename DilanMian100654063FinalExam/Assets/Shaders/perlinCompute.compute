// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


float4 colour;
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;


float grad(int hash, double x, double y){
     return ((hash & 1) == 1 ? x : -x) + ((hash & 2) == 2 ? y : -y);
}


float lerp(float a, float b, float t){
     return a  + t * (b-a);
}


float fade(float t){
     return t * t * t * (t * (t * 6 - 15) + 10);
}


float calcNoise(float x, float y){
	//adapted from https://github.com/Colin-Orian/Procedural-Generation-Sandbox/blob/master/src/main/java/PerlinNoise.java
    int permutation[256] = {
        151,160,137,91,90,15,					// Hash lookup table as defined by Ken Perlin.  
		131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,	
		190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
		88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
		77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
		102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
		135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
		5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
		223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
		129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
		251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
		49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
		138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
    };
    // TODO: insert actual code here!

	int doublePermutation[512];

	for(int i = 0; i < 256; i ++){
		doublePermutation[256+i] = doublePermutation[i] = permutation[i];
	}

    int xMod = (int)x % 255;
    int yMod = (int)y % 255;
	float xRemainder = x - (int)x;
	float yRemainder = y - (int)y;

	float xFade = fade(xRemainder);
	float yFade = fade(yRemainder);


	int bottomLeft, topLeft, topRight, bottomRight;

	bottomLeft = doublePermutation[doublePermutation[xMod] + yMod];
    topLeft = doublePermutation[doublePermutation[xMod] + (yMod+1)];
    topRight = doublePermutation[doublePermutation[(xMod+1)] + (yMod+1)];
    bottomRight = doublePermutation[doublePermutation[(xMod+1)] + yMod];
	
	float interBottom, interTop, interFinal;
	float temp1, temp2;

	temp1 = grad(bottomLeft, xRemainder, yRemainder-1);
    temp2 = grad(bottomRight, xRemainder-1, yRemainder-1);
	interBottom = lerp(temp1, temp2, xFade);

	temp1 = grad(topLeft, xRemainder, yRemainder-1);
    temp2 = grad(topRight, xRemainder-1, yRemainder-1);
    interTop = lerp(temp1, temp2, xFade);

	interFinal = lerp(interBottom, interTop, yFade);

	return (interFinal + 1) / 2;
	
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

	float total = 0.0f;
	float frequency = 1.3f;
	float amplitude = 1.0f;
	float maxValue = 0.0f;
	int ooctaves = 5.0f;
	float persistence = 1.0f;
	for(int i = 0; i < ooctaves; i ++){
		total += calcNoise(id.x * frequency, id.y * frequency) * amplitude;
		maxValue += amplitude;
		amplitude *= persistence;
		frequency *= 2.0f;
	}

	float noise = total / maxValue;
    

	float4 colour = float4(noise, noise, noise, 1.0f);

    Result[id.xy] = colour;
}


